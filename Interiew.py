

import os
import requests
import openai
import random

def generer_liste_personnage(theme,fichier):
    # a partir du theme, on va generer une liste de personnage
    prompt = (f"Voici le thÃ¨me : {theme}\n"
              "GÃ©nÃ¨re une liste de personnages qui pourraient rÃ©flÃ©chir Ã  ce thÃ¨me.\n"
              "Donne-moi une liste de 10 personnages avec leur nom et une courte description.\n"
              "Format : Nom - Description\n")
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "Tu es un expert en littÃ©rature et en philosophie."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7,
        max_tokens=2000
    )
    personnages = response.choices[0].message.content.strip().split("\n")
    with open(fichier, "w", encoding="utf-8") as f:
        for personnage in personnages:
            f.write(personnage + "\n")
    print(f"Liste de personnages gÃ©nÃ©rÃ©e et enregistrÃ©e dans {fichier}.")

def charger_personnages(fichier):
    with open(fichier, "r", encoding="utf-8") as f:
        return [ligne.strip() for ligne in f if ligne.strip()]

def generer_image(theme, personnage, description):
    # On remplace les espaces par des underscores pour le nom du personnage
    personnage = personnage.replace(" ", "_")
    # On gÃ©nÃ¨re une image Ã  partir du thÃ¨me et du personnage
    dalle_prompt = (f"Voici le thÃ¨me : {theme}\n"
                   f"Voici le personnage : {personnage}\n"
                   f"Voici la description : {description}\n"
                   "GÃ©nÃ¨re une image qui reprÃ©sente ce personnage en lien avec le thÃ¨me.\n"
                   "L'image doit Ãªtre de haute qualitÃ© et artistique.\n")
    
    response = openai.Image.create(
        model="dall-e-3",
        prompt=dalle_prompt,
        n=1,
        size="1024x1024"
    )
    
    image_url = response['data'][0]['url']
    return image_url

def telecharger_image(url, nom_fichier):
    response = requests.get(url)
    if response.status_code == 200:
        with open(nom_fichier, 'wb') as f:
            f.write(response.content)
        print(f"Image tÃ©lÃ©chargÃ©e : {nom_fichier}")
    else:
        print("Erreur lors du tÃ©lÃ©chargement de l'image.")

def generer_interview(personnage, theme):
    prompt_system = """Tu es un Ã©crivain crÃ©atif et historien spÃ©cialiste de la vulgarisation.
Tu sais adopter le style, le ton et les rÃ©fÃ©rences dâ€™un personnage cÃ©lÃ¨bre, quel que soit son Ã©poque ou son domaine.
Ton objectif : rÃ©diger une interview fictive mais crÃ©dible entre unÂ·e journaliste et un personnage cÃ©lÃ¨bre.
Lâ€™interview doit Ãªtre courte et structurÃ©e (titre, introduction, 5 questions-rÃ©ponses).
Chaque rÃ©ponse doit reflÃ©ter la personnalitÃ©, lâ€™Ã©poque, les idÃ©es et le ton du personnage. Elles doivent Ãªtre courtes, percutantes et pertinentes.
Le style doit Ãªtre vivant, fluide et lÃ©gÃ¨rement teintÃ© dâ€™humour ou dâ€™esprit, selon le personnage.
Si le personnage est dÃ©cÃ©dÃ© ou ancien, ses brÃ¨ve rÃ©ponses doivent sâ€™appuyer sur des anachronismes pertinents ou amusants mais toujours briÃ¨vement.
Si tu dÃ©tectes que le personnage nâ€™a aucun lien crÃ©dible avec le thÃ¨me, prÃ©cise-le dans lâ€™introduction de maniÃ¨re Ã©lÃ©gante et joue-en dans les rÃ©ponses."""

    prompt = f"""Objectif : RÃ©dige une interview fictive dâ€™un personnage cÃ©lÃ¨bre en lien avec le thÃ¨me suivant : {theme}.
Personnage choisi : {personnage}
Lâ€™interview doit respecter la structure suivante :
ğŸ”¹ Titre accrocheur
Trouve un titre original en lien avec le personnage, son Ã©poque ou une phrase marquante quâ€™il ou elle aurait pu dire.
ğŸ”¹ Introduction
PrÃ©sente briÃ¨vement le personnage et explique pourquoi il/elle est pertinentÂ·e pour aborder ce thÃ¨me aujourdâ€™hui.
ğŸ”¹ Questions / RÃ©ponses
Voici les 5 questions Ã  poser, auxquelles le personnage doit rÃ©pondre avec sa personnalitÃ©, son Ã©poque, son style :
Vous voilÃ  face Ã  une IA : curieux, effrayÃ© ou inspirÃ© ?
â†’ RÃ©ponse ancrÃ©e dans ses rÃ©fÃ©rences historiques ou personnelles.
Quel usage de lâ€™IA vous aurait fait gagner du temps Ã  votre Ã©poque ?
â†’ Cherche une rÃ©ponse drÃ´le, inattendue ou ingÃ©nieuse.
Comment imaginez-vous lâ€™avenir avec lâ€™IA (ou dans lâ€™espace) ?
â†’ Laisse place Ã  une vision poÃ©tique, exagÃ©rÃ©e ou utopique.
Quel conseil donneriez-vous Ã  unÂ·e collaborateurÂ·rice de Thales aujourdâ€™hui ?
â†’ Une leÃ§on, une maxime ou une formule pleine de sens.
Quelle IA rÃªveriez-vous dâ€™avoir Ã  vos cÃ´tÃ©s ?
â†’ Ce peut Ãªtre une invention fictive, un objet parlant ou un alliÃ© imaginaire.
Soigne le style pour quâ€™on sente bien le ton et les convictions du personnage."""

    
    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": prompt_system},
            {"role": "user", "content": prompt}
        ],
        temperature=0.8,
        max_tokens=1000
    )
    return response.choices[0].message.content.strip()
# description du prompt pour simuler une Interview avec un personnage   

if __name__ == "__main__":
    theme = "L'IA et l'espace"
    fichier_personnages = "personnages.txt"
    
    # Ã‰tape 1 : GÃ©nÃ©rer la liste de personnages
    generer_liste_personnage(theme,fichier_personnages)
    
    # Ã‰tape 2 : Charger les personnages depuis le fichier
    personnages = charger_personnages(fichier_personnages)
    
    for i, personnage in enumerate(personnages):
        print(f"{i + 1}. {personnage}")

    
    # # Ã‰tape 4 : GÃ©nÃ©rer l'image du personnage
    # description = "Un personnage cÃ©lÃ¨bre en lien avec le thÃ¨me de l'IA et de l'espace."
    # image_url = generer_image(theme, personnage_choisi, description)
    
    # # Ã‰tape 5 : TÃ©lÃ©charger l'image
    # nom_fichier_image = f"{personnage_choisi.replace(' ', '_')}.png"
    # telecharger_image(image_url, nom_fichier_image)
    
    # Ã‰tape 6 : GÃ©nÃ©rer l'interview
        interview = generer_interview(personnage, theme)
    
    # Afficher l'interview
        print(interview)
        # # Ã‰tape 7 : Enregistrer l'interview dans un fichier texte
        nom_fichier_interview = f"interview_{personnage.replace(' ', '_')}.txt"
        #cree le dossier interview s'il n'existe pas
        dossier_interview = "interviews"
        if not os.path.exists(dossier_interview):
            os.makedirs(dossier_interview)
        with open(os.path.join(dossier_interview, nom_fichier_interview), "w", encoding="utf-8") as f:
            f.write(interview)
        print(f"Interview enregistrÃ©e dans {nom_fichier_interview}.")

